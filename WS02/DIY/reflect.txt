In this workshop, I learned about two new topics in C++ reference and dynamic memory. 
The reference is a new way to call or pass through the function in Object-oriented languages. The reference is like assign a nickname to value or array or struct. The method to use that is pretty much like the way we use a pointer to pass by address or pass by value. When I use it in the workshop, I feel difficult to understand what’s the format of the reference, for example, when we assign it in the function prototype as a parameter, we need to add an ampersand in front of the reference’s name, and when we call it in the function, we don’t need to add any sign.
The dynamic memory is another topic I learned in this exercise. It gave me a lot of trouble when I learn how to use it in this workshop. I spend a lot of time to read and understand how to format dynamic memory and why we need to use dynamic memory in the program. We have two types of storing memory in the computer program, static and dynamic. The main difference between them is the static memory is controlled by the compiler, and the dynamic is controlled by the programmer. For example, when we declare an array with size 128 characters at the beginning of the program, the system will assign it in a specific address and specific size 128 bits. Even you only use 3 bits in this array, the occupation of this array’s size is still 128 bits, which means we waste 125 bits in the compiler. However, dynamic memory will be more intelligent, you can declare an array with dynamic memory, and its spaces only occupy how much you use in the memory. It could avoid wasting memory in the compiler when we code the program. The way to assign a dynamic memory is, we declare a dynamic name first, then assign it by using “new”. When we end the program we can use the command “end” to seal the dynamic memory, in case there is no memory leak in the program.
